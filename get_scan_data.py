import requests
import json
from datetime import datetime

# Nessus API credentials and URL
nessus_url = "https://localhost:8834"
access_key = "nessus acces key "
secret_key = "nessus secret key"

# Headers for API requests
headers = {
    "X-ApiKeys": f"accessKey={access_key}; secretKey={secret_key}"
}

def get_scans():
    try:
        response = requests.get(f"{nessus_url}/scans", headers=headers, verify=False)
        scans = response.json()["scans"]
        return scans
    except Exception as e:
        print("Error fetching scans:", e)
        return []

def get_scan_results(scan_id):
    try:
        response = requests.get(f"{nessus_url}/scans/{scan_id}", headers=headers, verify=False)
        scan_results = response.json()
        return scan_results
    except Exception as e:
        print(f"Error fetching scan results for scan ID {scan_id}:", e)
        return None

def normalize_scan_data(scan_results):
    print(json.dumps(scan_results, indent=4))  # Debugging

    normalized_data = {
        "scan_id": scan_results["info"]["object_id"],
        "name": scan_results["info"].get("name", "unknown"),
        "scan_type": scan_results["info"].get("scan_type", "unknown"),
        "target": scan_results["info"].get("targets", "unknown"),
        "scan_date": datetime.fromtimestamp(scan_results["info"].get("timestamp", 0)).isoformat() if scan_results["info"].get("timestamp") else "unknown",
        "status": scan_results["info"].get("status", "unknown"),
        "hostcount": scan_results["info"].get("hostcount", 0),
        "vulnerabilities": []
    }

    if "vulnerabilities" in scan_results:
        for vuln in scan_results["vulnerabilities"]:
            print(json.dumps(vuln, indent=4))  # Debugging

            normalized_vuln = {
                "vuln_id": vuln["plugin_id"],
                "plugin_name": vuln.get("plugin_name", "unknown"),
                "severity": vuln["severity"],
                "description": vuln.get("description", "No description available"),
                "impact": vuln.get("impact", "No impact information"),
                "remediation": vuln.get("solution", "No remediation available"),
                "references": vuln.get("see_also", []),
                "plugin_family": vuln.get("plugin_family", "unknown")
            }
            normalized_data["vulnerabilities"].append(normalized_vuln)
    else:
        print(f"No vulnerabilities found for scan ID {scan_results['info']['object_id']}")

    return normalized_data

def aggregate_scan_results():
    scans = get_scans()
    aggregated_results = []

    if scans:
        for scan in scans:
            scan_id = scan["id"]
            scan_results = get_scan_results(scan_id)
            if scan_results:
                normalized_data = normalize_scan_data(scan_results)
                aggregated_results.append(normalized_data)

    return aggregated_results
